[{"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\index.tsx":"1","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\reportWebVitals.ts":"2","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\App.tsx":"3","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\services\\api.ts":"4","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\routes.tsx":"5","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\pages\\Dashboard\\index.tsx":"6","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\pages\\Customer\\index.tsx":"7","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\components\\PageBars\\CustomerPageBar.tsx":"8","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\components\\Header\\index.tsx":"9","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\pages\\Seller\\index.tsx":"10","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\components\\PageBars\\SellerPageBar.tsx":"11"},{"size":266,"mtime":1607612951399,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":3858,"mtime":1607612015122,"results":"15","hashOfConfig":"13"},{"size":105,"mtime":1607604035298,"results":"16","hashOfConfig":"13"},{"size":532,"mtime":1607614132621,"results":"17","hashOfConfig":"13"},{"size":808,"mtime":1607628350120,"results":"18","hashOfConfig":"13"},{"size":8624,"mtime":1607626122575,"results":"19","hashOfConfig":"13"},{"size":730,"mtime":1607622779393,"results":"20","hashOfConfig":"13"},{"size":372,"mtime":1607618111547,"results":"21","hashOfConfig":"13"},{"size":8746,"mtime":1607626002668,"results":"22","hashOfConfig":"13"},{"size":742,"mtime":1607614342879,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"r2dtmi",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\index.tsx",[],["49","50"],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\reportWebVitals.ts",[],["51","52"],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\App.tsx",[],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\services\\api.ts",[],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\routes.tsx",[],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\pages\\Dashboard\\index.tsx",[],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\pages\\Customer\\index.tsx",[],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\components\\PageBars\\CustomerPageBar.tsx",[],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\components\\Header\\index.tsx",[],"D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\pages\\Seller\\index.tsx",["53"],"import api from \"../../services/api\";\r\nimport Header from \"../../components/Header\";\r\nimport React, { ChangeEvent, FormEvent, useState } from \"react\";\r\nimport SellerPageBar from \"../../components/PageBars/SellerPageBar\";\r\nimport {  Card, CardBody, CardFooter, CardHeader, Col, Container, Form, FormGroup, Modal, Row, Table, Label, Input, Button} from \"reactstrap\";\r\n\r\n//cria interface Vendedor\r\ninterface Vendedor {\r\n    idVendedor: number;\r\n  cpf: string;\r\n  nomeVendedor: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\n\r\n//cria um novo objeot Vendedor\r\nconst blankVendedor: Vendedor = {\r\n  idVendedor: 0,\r\n  cpf: '',\r\n  nomeVendedor: '',\r\n  latitude: '',\r\n  longitude: '',\r\n};\r\n\r\n//busca vendedores cadastrados assim que a página carrega e mostra na tela\r\nconst Seller: React.FC = () => {\r\n  const [sellers, setSellers] = useState<Vendedor[]>(() => {\r\n    api.get('vendedor/all').then((response) => {\r\n      setSellers(response.data);\r\n    });\r\n\r\n    return [];\r\n  });\r\n\r\n  // Modal de novo vendedor\r\n  const [newSeller, setNewSeller] = useState<Vendedor>(blankVendedor);\r\n  const [sellerModalIsVisible, setSellerModalIsVisible] = useState(false);\r\n  const toggleSellerModal = () => setSellerModalIsVisible(!sellerModalIsVisible);\r\n  const closeSellerModal = () => {\r\n    setNewSeller(blankVendedor);\r\n    setSellerModalIsVisible(false);\r\n  }\r\n\r\n  //verificador para saber se é atualização de vendedor\r\n  const [currentSeller, setCurrentSeller] = useState<Vendedor>(blankVendedor);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const editRow = (vendedor: Vendedor) => {\r\n    setCurrentSeller(vendedor);\r\n    setIsEditing(true);\r\n    setSellerModalIsVisible(true);\r\n  }\r\n\r\n  //Funções de handle\r\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    if (isEditing){\r\n      setCurrentSeller({ ...currentSeller, [name]: value});\r\n    } else {\r\n      setNewSeller({ ...newSeller, [name]: value});\r\n    }\r\n  }\r\n\r\n  //cadastra novo vendedor\r\n  const handleSubmitNewSeller = async (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      newSeller.idVendedor = parseInt(newSeller.idVendedor.toString());\r\n      await api.post('vendedor', newSeller);\r\n\r\n      alert(\"Vendedor cadastrado com sucesso!\");\r\n      closeSellerModal();\r\n\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      alert(\"Ocorreu um erro ao cadastrar!\");\r\n    }\r\n  }\r\n\r\n  //atualiza vendedor\r\n  const handleSubmitSellerUpdate = async (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      await api.put('vendedor', currentSeller);\r\n\r\n      alert('Vendedor atualizado com sucesso!');\r\n\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      alert('Ocorreu um erro ao atualizar!');\r\n    }\r\n  }\r\n\r\n  //deleta vendedor\r\n  const handleDeleteSeller = async (idVendedor: number) => {\r\n    try {\r\n      await api.delete(`vendedor?idVendedor=${idVendedor}`);\r\n\r\n      alert(\"Vendedor deletado com sucesso!\");\r\n\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      alert(\"Ocorreu um erro ao deletar!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={sellerModalIsVisible} toggle={toggleSellerModal} size=\"lg\">\r\n        <Form onSubmit={(e) => { // verifica se é edição de cadastro\r\n          console.log({ isEditing, newSeller, currentSeller });\r\n          isEditing \r\n            ? handleSubmitSellerUpdate(e) \r\n            : handleSubmitNewSeller(e)\r\n          }}>\r\n          <Card>\r\n            <CardHeader>Adicionar novo vendedor</CardHeader> \r\n            <CardBody>\r\n              <Row>\r\n                <Col lg=\"2\">\r\n                  <FormGroup>\r\n                    <Label htmlFor=\"idVendedor\">ID Vendedor</Label> // c\r\n                    <Input \r\n                      type=\"number\" \r\n                      placeholder=\"ID Vendedor\" \r\n                      name=\"idVendedor\" \r\n                      value={isEditing ? currentSeller.idVendedor : newSeller.idVendedor} \r\n                      onChange={handleInputChange} \r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"4\">\r\n                  <FormGroup>\r\n                    <Label htmlFor=\"cpf\">CPF</Label>\r\n                    <Input \r\n                      type=\"text\" \r\n                      placeholder=\"Digite o CPF...\" \r\n                      name=\"cpf\" \r\n                      value={isEditing ? currentSeller.cpf : newSeller.cpf} \r\n                      onChange={handleInputChange} \r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\">\r\n                  <FormGroup>\r\n                    <Label htmlFor=\"nomeVendedor\">Nome do Vendedor</Label>\r\n                    <Input \r\n                      type=\"text\" \r\n                      placeholder=\"Digite o nome do vendedor...\" \r\n                      name=\"nomeVendedor\" \r\n                      value={isEditing ? currentSeller.nomeVendedor : newSeller.nomeVendedor} \r\n                      onChange={handleInputChange} \r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col lg=\"6\">\r\n                  <FormGroup>\r\n                    <Label htmlFor=\"latitude\">Latitude</Label>\r\n                    <Input \r\n                      type=\"text\" \r\n                      placeholder=\"Digite a latitude...\" \r\n                      name=\"latitude\" \r\n                      value={isEditing ? currentSeller.latitude : newSeller.latitude} \r\n                      onChange={handleInputChange} \r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\">\r\n                  <FormGroup>\r\n                    <Label htmlFor=\"longitude\">Longitude</Label>\r\n                    <Input \r\n                      type=\"text\" \r\n                      placeholder=\"Digite a longitude...\" \r\n                      name=\"longitude\" \r\n                      value={isEditing ? currentSeller.longitude : newSeller.longitude} \r\n                      onChange={handleInputChange} \r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n            <CardFooter>\r\n              <Row>\r\n                <Col lg=\"12\" className=\"d-flex justify-content-between\">\r\n                  <Button type=\"submit\" color=\"success\">Confirmar</Button>\r\n                  <Button type=\"button\" color=\"danger\" onClick={closeSellerModal}>Cancelar</Button>\r\n                </Col>\r\n              </Row>\r\n            </CardFooter>\r\n          </Card>\r\n        </Form>\r\n      </Modal>\r\n\r\n      <Container>\r\n        <Header />\r\n        <SellerPageBar newSellerFunction={() => {\r\n          setIsEditing(false);\r\n          toggleSellerModal();\r\n        }} />\r\n        <Row className=\"mt-2\">\r\n          <Col lg=\"12\">\r\n            <Card className=\"mt-4\">\r\n              <CardBody className=\"p-0\">\r\n                <Table responsive small hover>\r\n                  <thead className=\"thead-light\">\r\n                    <tr>\r\n                      <th>ID Vendedor</th>\r\n                      <th>CPF</th>\r\n                      <th>Nome do Vendedor</th>\r\n                      <th>Latitude</th>\r\n                      <th>Longitude</th>\r\n                      <th> </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {sellers.map((vendedor, index) => (\r\n                      <tr key={`${vendedor.nomeVendedor}&${index}`}>\r\n                        <td>{vendedor.idVendedor}</td>\r\n                        <td>{vendedor.cpf}</td>\r\n                        <td>{vendedor.nomeVendedor}</td>\r\n                        <td>{vendedor.latitude}</td>\r\n                        <td>{vendedor.longitude}</td>\r\n                        <td>\r\n                          <div>\r\n                          <Button type=\"button\" color=\"info\" onClick={(e) => editRow(vendedor)}>\r\n                            Editar\r\n                          </Button>\r\n                          <Button className=\"ml-2\" type=\"button\" color=\"danger\" onClick={(e) => handleDeleteSeller(vendedor.idVendedor)}>\r\n                            Excluir\r\n                          </Button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </Table>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seller;\r\n","D:\\Pessoal\\ProjetosPessoais\\ProvaSalutem\\prova_salutem_front\\src\\components\\PageBars\\SellerPageBar.tsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"54","replacedBy":"58"},{"ruleId":"56","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":130,"column":68,"nodeType":"62","endLine":131,"endColumn":21},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],["63"],["64"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","no-global-assign","no-unsafe-negation"]